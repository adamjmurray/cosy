module Cosy
	grammar Sequence
	
		rule root
			(statement space?)* sequence_root? <CosyNode>
		end
	
		
		rule statement
			assignment ';'
		end
	
		
		rule assignment
			var space? '=' sequence_root space? <AssignmentNode>
		end
	
	
		rule sequence_root
			choice  / space / ''
		end


		rule choice
			space? sequence (space? '|' space? sequence)* space? <ChoiceNode>
		end


		rule sequence
			space? sequence_element (space sequence_element)* space? <SequenceNode>
		end


		# Todo: multiple modifiers
		rule sequence_element
			chain modifier:modifier <ModifiedNode> / chain 
		end

		
		rule chain
			chain_element (':' chain_element)* <ChainNode>
		end


		rule chain_element
			element modifier:modifier <ModifiedNode> / element
		end


		rule element
			'(' subsequence:choice ')' / chord / primitive
		end


		rule modifier
			 operator:operator operand:element <BehaviorNode>
		end


		rule operator
			space? ('*'/'&'/'@') space? <OperatorNode>
		end
	
	
	  rule chord
			'[' space? primitive (space primitive)* space? ']' <ChordNode>
	  end


		rule primitive
			pitch / velocity / duration / number/ string / var / ruby
		end

	
		rule pitch
			note_name:[A-Ga-g] accidentals:('#'/'b'/'+'/'_')* octave:int <PitchNode>
		end

	
		rule velocity
			('mp' / 'ppp' / 'pp' / 'p' / 'mf' / 'fff' / 'ff' / 'f') '' <VelocityNode>
		end

	
		rule duration
			multiplier:(number/'-')? metrical_duration:[WwHhQqEeSsRrXx] modifier:duration_modifier* <DurationNode>
		end
		
		rule duration_modifier
		  't' / '.'
	  end

	
		rule number
			float / int
		end

	
		rule float
			'-'? [0-9]+ '.' [0-9]+ <FloatNode>
		end

	
		rule int
			'-'? [0-9]+ <IntNode>
		end
	
	
		rule string
		  "'" ("\\'" / !"'" .)* "'" <StringNode>
			/
		  '"' ('\"' / !'"' .)* '"' <StringNode>
		end
		
		
		rule var
			'$' [A-Za-z] [\w]*  <VariableNode>
			/ 
			'$'+ <VariableNode>
		end
	
	
		rule ruby
			'{' script:( string / !('}'/'"'/"'") . )* '}' <RubyNode>
		end
		
		
		# TODO: use this somewhere!
		rule command
			'{' ruby '}'
		end


		rule space
			[\s]+
		end	

	end
end