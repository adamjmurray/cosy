module Cosy
	grammar Sequence
	
		rule root
			 space? (statement ';' space?)* statement? space? <CosyNode>
		end
	
		
		rule statement
			assignment / sequence_root
		end
	
		
		rule assignment
			numeric_constant space? '=' space? (number/ruby) <AssignmentNode>
			/
			var space? '=' sequence_root <AssignmentNode>
		end
		
		
		rule numeric_constant
		  ('TEMPO'/ 'QPM' / 'QNPM') '' <TempoNode>
		  /
		  ('PROGRAM' / 'PGM') '' <ProgramNode>
	  end
	
	
		rule sequence_root
			choice
		end


		rule choice
			space? sequence (space? '|' space? sequence)* space? <ChoiceNode>
		end


		rule sequence
			space? sequence_element (space sequence_element)* space? <SequenceNode>
		end


		rule sequence_element
			command / chain modifier:modifier <ModifiedNode> / chain / foreach
		end

		
		rule chain
			chain_element (':' chain_element)* <ChainNode>
		end


		rule chain_element
			element modifier:modifier <ModifiedNode> / element
		end
    
		
		rule foreach
      '(' sequence_root ')@(' sequence_root ')' ('@(' sequence_root ')')* <ForEachNode>
	  end
		

		rule element
			'(' subsequence:sequence_root ')' !'@' / chord / primitive
		end


		rule modifier
			 operator:operator operand:element <BehaviorNode>
		end


		rule operator
			space? ('*'/'&') space? <OperatorNode>
		end
	
	
	  rule chord
			'[' space? primitive (space primitive)* space? ']' <ChordNode>
	  end


		rule primitive
			velocity / pitch / duration / number / string / var / ruby
		end

	
		rule pitch
			note_name:[A-Ga-g] accidentals:('#'/'b'/'+'/'_')* octave:(int)? <PitchNode>
		end

	
		rule velocity
			('mp' / 'ppp' / 'pp' / 'p' / 'mf' / 'fff' / 'ff' / 'forte'/'fo'/'o') '' <VelocityNode>
		end

	
		rule duration
			multiplier:(number/'-')? metrical_duration:metrical_duration modifier:duration_modifier* <DurationNode>
		end

		
		rule metrical_duration
		  [WwHhQqIiSsRrXx] 
	  end

		
		rule duration_modifier
		  't' / '.'
	  end
	
	
		rule number
			ratio / float / int
		end


    rule ratio
      int '/' int <RatioNode>
    end
	
	
		rule float
			'-'? [0-9]+ '.' [0-9]+ <FloatNode>
		end

	
		rule int
			'-'? [0-9]+ <IntNode>
		end
	
	
		rule string
		  "'" ("\\'" / !"'" .)* "'" <StringNode>
			/
		  '"' ('\"' / !'"' .)* '"' <StringNode>
		end
		
		
		rule var
			'$' [A-Za-z] [\w]*  <VariableNode>
			/ 
			'$'+ <VariableNode>
		end
	
	
		rule ruby
			'{' script:( string / !('}'/'"'/"'") . )* '}' <RubyNode>
		end
		
		
		rule command
			'{' ruby:ruby '}' <CommandNode>
		end


		rule space
			[\s]+
		end	

	end
end