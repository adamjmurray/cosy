module Cosy

  class SequenceParser
    # this class already generated by treetop, but I need to add some behavior

    # define a post-parsing step (compress):
    alias parse_sequence parse
    def parse(input, options={})
      input = input.to_s
      tree = compress parse_sequence(input, options)
      if tree.nil?
        raise "Failed to parse: #{input}\n#{parser_error}"
      end
      return tree
    end
    
    def parser_error
      "(#{failure_line},#{failure_column}): #{failure_reason}"
    end

    def verbose_parse input
      puts "PARSING: #{input}"
      output = parse input
      if output
        puts 'success'
        print_tree output
      else
        puts 'failure'
        puts "#{failure_line}:#{failure_column}: #{failure_reason}"
      end
      return output
    end

    def compress tree
      return nil if tree.nil?
      # strip off unnecessary container nodes
      while (not (tree.atom? or tree.terminal?)) and tree.children.size == 1
        tree = tree.children[0]
      end
      # construct parent-children relationships
      parents = []
      tree.visit(lambda do |node| # enter
        node.parent = parents.last
        parents.push node
      end,
      lambda do |node| # exit
        parents.pop
      end)
      return tree
    end

    def print_tree tree
      depth = 0
      tree.visit(lambda do |node|
        depth.times{print '    '}
        puts node.inspect
        depth += 1
      end,
      lambda do |node| # exit
        depth -= 1
      end)
    end

    def print_raw_parse_tree tree
      depth = 0
      tree.visit_parse_tree(lambda do |node|
        if not node.empty? then
          depth.times{print '    '}
          puts node.inspect
        end
        depth += 1
      end,
      lambda do |node| # exit
        depth -= 1
      end)
    end   
  end

end

