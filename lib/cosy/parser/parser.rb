require 'rubygems'
require 'treetop'
cosy_root = File.expand_path(File.join(File.dirname(__FILE__), '..'))
# Due to a bug? in polyglot/treetop, when requiring this file from a file in another
# folder (like a rake task or test case) it can't find the grammar file unless I add
# this folder to the path:
$LOAD_PATH.insert(0, File.dirname(__FILE__))
require 'grammar'
require File.join(cosy_root, 'constants')
require File.join(cosy_root, 'model/syntax_tree')

module Cosy

  class Cosy::SequenceParser
    # this class already generated by treetop, but I need to add some behavior

    # define a post-parsing step (compress):
    alias parse_sequence parse
    def parse *args
      compress parse_sequence(*args)
    end

    def verbose_parse input
      puts "PARSING: #{input}"
      output = parse input
      if output
        puts 'success'
        print_tree output
      else
        puts 'failure'
        puts "#{failure_line}:#{failure_column}: #{failure_reason}"
      end
      return output
    end

    def compress tree
      return nil if tree.nil?
      # strip off unnecessary container nodes
      while tree.nonterminal? and tree.children.size == 1
        tree = tree.children[0]
      end
      # construct parent-children relationships
      # is this really necessary? might want it in the future...
      parents = []
      tree.visit(lambda do |node| # enter
        node.parent = parents.last
        parents.push node
      end,
      lambda do |node| # exit
        parents.pop
      end)
      return tree
    end

    def print_tree tree
      depth = 0
      tree.visit(lambda do |node|
        depth.times{print '    '}
        puts node.inspect
        depth += 1
      end,
      lambda do |node| # exit
        depth -= 1
      end)
    end

    def print_raw_parse_tree tree
      depth = 0
      tree.visit_parse_tree(lambda do |node|
        if not node.empty? then
          depth.times{print '    '}
          puts node.inspect
        end
        depth += 1
      end,
      lambda do |node| # exit
        depth -= 1
      end)
    end   
  end

end


# Cosy::SequenceParser.new.verbose_parse '1 2 {{puts 3+4}} 4'

# Cosy::SequenceParser.new.verbose_parse 'TEMPO = 120; C4; TEMPO=257; D4'

# Cosy::SequenceParser.new.verbose_parse '(-1 -2)@((3 4)@($$ $ 99))'

# Cosy::SequenceParser.new.verbose_parse '(1 2)@(3 $ 4)'

#Cosy::SequenceParser.new.verbose_parse '(1 2)*2:(3 4 5):(6 7 8)'


# Cosy::SequenceParser.new.verbose_parse '$x = C4 d4 e4; $x [e4 g5]'

# Cosy::SequenceParser.new.verbose_parse '(C4:mf:q D4 E4 F4)*3 G4:w'


# # TODO: these really need to go into unit tests
# Cosy::SequenceParser.new.verbose_parse 'c4'
# puts
# Cosy::SequenceParser.new.verbose_parse 'c4*4'
# puts
# Cosy::SequenceParser.new.verbose_parse '(c4)'
# puts
# Cosy::SequenceParser.new.verbose_parse '(c4)*4'
# puts
# Cosy::SequenceParser.new.verbose_parse 'c4:mf'
# puts
# Cosy::SequenceParser.new.verbose_parse 'c4:mf*4'
# puts
# Cosy::SequenceParser.new.verbose_parse '(c4:mf)'
# puts
# Cosy::SequenceParser.new.verbose_parse '(c4:mf)*4'
# puts
# Cosy::SequenceParser.new.verbose_parse 'c4:(mf f)'
# puts
# Cosy::SequenceParser.new.verbose_parse 'c4*2:(mf f)'
# puts
# Cosy::SequenceParser.new.verbose_parse 'c4*2:(mf f)*3'
# puts
# Cosy::SequenceParser.new.verbose_parse '(c4*2:(mf f)*3)*4'
# puts
# Cosy::SequenceParser.new.verbose_parse 'c4:(mf f)*4'
# puts
# Cosy::SequenceParser.new.verbose_parse '(c4 g4):(mf f)'
# puts
# Cosy::SequenceParser.new.verbose_parse '(c4 g4)*2:(mf f)'
# puts
# Cosy::SequenceParser.new.verbose_parse '(c4 g4):(mf f)*3'
# puts
# Cosy::SequenceParser.new.verbose_parse '(c4 g4)*2:(mf f)*3'
# puts
# Cosy::SequenceParser.new.verbose_parse '((c4 g4)*2:(mf f)*3)*4'
# puts
# Cosy::SequenceParser.new.verbose_parse '(c4:mf d4)'
# puts
# Cosy::SequenceParser.new.verbose_parse '(c4:mf d4)*4'
# puts
# Cosy::SequenceParser.new.verbose_parse 'c4 d4'
# puts
# Cosy::SequenceParser.new.verbose_parse 'c4 d4*4'
# puts
# Cosy::SequenceParser.new.verbose_parse '(c4 d4)'
# puts
# Cosy::SequenceParser.new.verbose_parse '(c4 d4)*4'
# puts
# Cosy::SequenceParser.new.verbose_parse '(c4 d4*3)*4'
# puts
# Cosy::SequenceParser.new.verbose_parse 'c4 | d4'
# puts
# Cosy::SequenceParser.new.verbose_parse '(c4 | d4)'
# puts
# Cosy::SequenceParser.new.verbose_parse 'c4 | d4*4'
# puts
# Cosy::SequenceParser.new.verbose_parse '(c4 | d4)*4'
# puts
# Cosy::SequenceParser.new.verbose_parse '(c4 | d4*3)*4'
# puts
# Cosy::SequenceParser.new.verbose_parse 'c4:g3 | d4*4'
# puts
# Cosy::SequenceParser.new.verbose_parse 'c4 | d4:a5*4'
# puts
# Cosy::SequenceParser.new.verbose_parse '(c4:g3 | d4)*4'
# puts
# Cosy::SequenceParser.new.verbose_parse '(c4:g3 | d4*3)*4'
# puts
# Cosy::SequenceParser.new.verbose_parse '(c4 | d4:a5)*4'
# puts
# Cosy::SequenceParser.new.verbose_parse '(c4 | d4:a5*3)*4'
# puts
# Cosy::SequenceParser.new.verbose_parse 'c4 e3 | d4*4'
# puts
# Cosy::SequenceParser.new.verbose_parse 'c4 | d4 f5*4'
# puts
# Cosy::SequenceParser.new.verbose_parse 'c4 | (d4 f5)*4'
# puts
# Cosy::SequenceParser.new.verbose_parse '(c4 e3 | d4)*4'
# puts
# Cosy::SequenceParser.new.verbose_parse '(c4 e3 | d4*3)*4'
# puts
# Cosy::SequenceParser.new.verbose_parse '(c4 | d4 f5)*4'
# puts
# Cosy::SequenceParser.new.verbose_parse '(c4 | (d4 f5))*4'
# puts
# Cosy::SequenceParser.new.verbose_parse '(c4 | d4 f5*3)*4'
# puts
# Cosy::SequenceParser.new.verbose_parse '(c4 | (d4 f5)*3)*4'
# puts
# # todo choices with chains and sequences (this is getting complicated!)



# puts (Cosy::SequenceParser.new.verbose_parse '-q').value

# x = SequencingGrammarParser.new.verbose_parse '(1 2)*1'
# puts x.length

# SequencingGrammarParser.new.verbose_parse '(1 2 3)&4 ([C4 G4]:mf:q (C4:f:e | G4:f:s*2)) * 2.5  (1 2 3):(4 5 6)'
# SequencingGrammarParser.new.verbose_parse '(1 2):(3 4)*2 ((1|2 3)*2):(3 4)'

# SequencingGrammarParser.new.verbose_parse '0:1:2:3*4'

# SequencingGrammarParser.new.verbose_parse '1 2'
 