#!/usr/bin/env ruby
require 'optparse' 
require 'ostruct'
$:.unshift File.dirname(__FILE__)+'/../lib'
require 'cosy'

module Cosy
  class CommandLineArgs
    def self.parse(command, args)
      options = OpenStruct.new

      parser = OptionParser.new do |opts|
        opts.banner = "\nUsage: #{command} [options] [cosyfile] [midifile]"  
      
        opts.separator ""

        opts.separator "#{command} supports two modes for generating MIDI:"
        opts.separator "  1. realtime playback, used when no midifile is specified"
        opts.separator "  2. offline generation of MIDI files"

        opts.separator ""
        
        opts.separator "Options:"        
        
        opts.on("-d", "--driver DRIVER_NAME", 
          "MIDIator driver used for realtime output."
        ) { |driver| options.driver = driver }

        opts.separator ""
        
        opts.on("-e", "--eval 'COSY_SYNTAX'", 
          "Provides input to convert to MIDI.",
          "If this option is not used, a cosyfile",
          "must be specified."       
        ) { |input| options.input = input }

        opts.separator ""
        opts.on("--osc", 
          "Enable OSC support."
        ) { |val| options.osc=true }

        opts.separator ""
        opts.on("--gamelan", 
          "Use the gamelan scheduler."
        ) { |val| options.gamelan=true }

        opts.separator ""
        opts.on("-h", "--help", 
          "Display this help and exit."
        ) { |val| puts opts.to_s; exit }
           
        opts.separator ""
        opts.on("--debug", 
          "Run in debug mode."
          # TODO support different debug levels, high level should also set $DEBUG=true
        ) { |val| $COSY_DEBUG=true }
           
        opts.separator ""    
        
        opts.separator "Examples:"
        opts.separator "  #{command} -e 'c4 d e f g a b c5' output.mid"
        opts.separator "  #{command} -e 'c4 d e f g a b c5'"
        opts.separator ""
        opts.separator "  On OS X, try the dls_synth driver for direct output:"
        opts.separator "  #{command} -d dls_synth -e 'c4 d e f g a b c5'"
        opts.separator "  otherwise a separate program like SimpleSynth is needed to hear something."
        opts.separator ""
      end

      rest = parser.parse(args) 
      if not options.input and rest.empty?
        puts parser.to_s
        exit 1
      end       
      return options, rest
    end
  end
end

options, files = Cosy::CommandLineArgs.parse(File.basename($0), ARGV)

if options.input
  output_path = files[0]
  cosy_syntax = options.input
else
  input_path  = files[0]
  output_path = files[1]
  cosy_syntax = ""
  File.open(input_path) do |file| 
    file.each_line do |line| 
      first_two = line[0..1]
      if first_two != "--" and first_two != "##"  # a comment
        cosy_syntax += line
      end
    end
  end 
end

begin
  if output_path
    require 'cosy/renderer/midi_file_renderer'
    Cosy::MidiFileRenderer.new({
      :input  => cosy_syntax, 
      :output => output_path
    }).render
  else
    if options.gamelan
      require 'cosy/renderer/midi_gamelan_renderer'
      clazz = Cosy::MidiGamelanRenderer
      # TODO: this won't work with OSC
      # I think I should merge all of these options into one renderer that uses
      # the gamelan scheduler and supports OSC
    else
      require 'cosy/renderer/midi_renderer'
      if options.osc
        require 'cosy/renderer/midi_osc_renderer'    
        clazz = Cosy::MidiOscRenderer
      else
        clazz = Cosy::MidiRenderer
      end
    end
    clazz.new({
      :input  => cosy_syntax, 
      :driver => options.driver
    }).render
  end
rescue => exception
  STDERR.puts "#{exception.class}: #{exception.message}"
  STDERR.puts exception.backtrace.join("\n") if $COSY_DEBUG
end