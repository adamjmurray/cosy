grammar SequencingGrammar
	
	rule root
		sequence / space / '' 
	end
	
	rule sequence
		non_parenthesized_sequence / parenthesized_sequence
		
		# Must try to consume non_parenthesized_sequence first, otherwise
		# repetitions would be eaten by the parenthesized_sequence rule
	end
	
	rule non_parenthesized_sequence
		space? sequenced_element (space sequenced_element)* space? <SequenceNode>
		
		# Must try to consume repetitions first, otherwise value repetitions
		# will be eaten by the value rule
	end

	rule parenthesized_sequence
		space? '(' non_parenthesized_sequence ')' space?
	end
	
	rule sequenced_element
		repetition / value
	end

	rule repetition
		'(' sequence ')' repeat_operator repetitions:number <RepetitionNode>
		/ 
		value repeat_operator repetitions:number <RepetitionNode>
	end
	
	rule repeat_operator
		space? '*' space?
	end
	
	rule value
		chord / primitive
	end
	
  rule chord
		'[' space? primitive (space primitive)* space? ']' <ChordNode>
  end

	rule primitive
		note / number / string / ruby
	end
	
	rule note
		note_name:[A-Ga-g] accidentals:('#'/'b'/'+'/'_')* octave:int <NoteNode>
	end
	
	rule number
		float / int
	end
	
	rule float
		'-'? [0-9]+ '.' [0-9]+ <FloatNode>
	end
	
	rule int
		'-'? [0-9]+ <IntNode>
	end
	
	rule string
	  "'" ("\\'" / !"'" .)* "'" <StringNode>
		/
	  '"' ('\"' / !'"' .)* '"' <StringNode>
	end
	
	rule ruby
		'{' script:(string / !('}'/'"'/"'") .)* '}' <RubyNode>
	end

	rule space
		[\s]+
	end	

end
