grammar SequencingGrammar
	
	rule root
		subseq space? <SeqNode> / space / '' 
	end

	rule subseq
		space? (repetition/value) (space (repetition/value))* space?
	end
	
	rule repetition
		'(' subseq ')' space? '*' space? repetitions:number <RepetitionNode>
		/ 
		value space? '*' space? repetitions:number <RepetitionNode>
	end
	
	rule value
		chord / primitive
	end
	
  rule chord
		'[' space? primitive (space primitive)* space? ']' <ChordNode>
  end

	rule primitive
		note / number / string / ruby
	end
	
	rule note
		note_name:[A-Ga-g] accidentals:('#'/'b'/'+'/'_')* octave:int <NoteNode>
	end
	
	rule number
		float / int
	end
	
	rule float
		'-'? [0-9]+ '.' [0-9]+ <FloatNode>
	end
	
	rule int
		'-'? [0-9]+ <IntNode>
	end
	
	rule string
	  "'" ("\\'" / !"'" .)* "'"
		/
	  '"' ('\"' / !'"' .)* '"'
	end
	
	rule ruby
		'{' (string / !('}'/'"'/"'") .)* '}'
	end

	rule space
		[\s]+
	end	

end
