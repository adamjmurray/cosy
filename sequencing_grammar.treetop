grammar SequencingGrammar
	
	rule root
		choice / space / '' 
	end


	rule choice
		space? sequence (space? '|' space? sequence)* space? <ChoiceNode>
	end


	rule sequence
		space? chain (space chain)* space? <SequenceNode>
	end

		
	rule chain
		element (':' element)* modifier:modifier? <ChainNode>
	end

		 
	rule element
 	 '(' subsequence:choice ')' / chord / primitive
	end


	rule modifier
		 operator:operator operand:(number/ruby) <ModifierNode>
	end


	rule operator
		space? ('*'/'&') space? <OperatorNode>
	end
	
	
  rule chord
		'[' space? primitive (space primitive)* space? ']' <ChordNode>
  end


	rule primitive
		note / velocity / duration / number / string / ruby
	end

	
	rule note
		note_name:[A-Ga-g] accidentals:('#'/'b'/'+'/'_')* octave:int <NoteNode>
	end

	
	rule velocity
		('mp' / 'ppp' / 'pp' / 'p' / 'mf' / 'fff' / 'ff' / 'f') '' <VelocityNode>
	end

	
	rule duration
		multiplier:(number/'-')? metrical_duration:[WwHhQqEeSsRrXx] modifier:('t'? '.'*)? <DurationNode>
	end

	
	rule number
		float / int
	end

	
	rule float
		'-'? [0-9]+ '.' [0-9]+ <FloatNode>
	end

	
	rule int
		'-'? [0-9]+ <IntNode>
	end
	
	
	rule string
	  "'" ("\\'" / !"'" .)* "'" <StringNode>
		/
	  '"' ('\"' / !'"' .)* '"' <StringNode>
	end
	
	
	rule ruby
		'{' script:( string / !('}'/'"'/"'") . )* '}' <RubyNode>
	end


	rule space
		[\s]+
	end	

end
