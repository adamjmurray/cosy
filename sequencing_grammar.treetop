grammar SequencingGrammar
	
	rule root
		sequence / space / '' 
	end

	rule sequence
		space? subsequence (space subsequence)* space? <SequenceNode>
	end
	
	rule subsequence
		element modifier:modifier? <SubsequenceNode>
	end
		 
	rule element
 	 '(' sequence:sequence ')' / chord / primitive
	end
		
	rule modifier
		space? operator:('*'/'&') space? repetitions:(number/ruby)
	end
	
  rule chord
		'[' space? primitive (space primitive)* space? ']' <ChordNode>
  end

	rule primitive
		note / number / string / ruby
	end
	
	rule note
		note_name:[A-Ga-g] accidentals:('#'/'b'/'+'/'_')* octave:int <NoteNode>
	end
	
	rule number
		float / int
	end
	
	rule float
		'-'? [0-9]+ '.' [0-9]+ <FloatNode>
	end
	
	rule int
		'-'? [0-9]+ <IntNode>
	end
	
	rule string
	  "'" ("\\'" / !"'" .)* "'" <StringNode>
		/
	  '"' ('\"' / !'"' .)* '"' <StringNode>
	end
	
	rule ruby
		'{' script:(string / !('}'/'"'/"'") .)* '}' <RubyNode>
	end

	rule space
		[\s]+
	end	

end
